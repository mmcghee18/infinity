{"version":3,"sources":["styles/styles.js","article-components/Header.jsx","article-components/Counting.jsx","hooks/useKeyPress.js","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","FullPageContainer","styled","div","KeyboardKey","span","AnimatingInfinity","props","useSpring","config","duration","x","from","svg","strokeDasharray","strokeDashoffset","width","height","viewBox","stroke","fill","strokeWidth","d","transform","NumberLines","x1","y1","x2","y2","y","Header","useState","madeGuess","setMadeGuess","onClick","style","marginTop","display","alignItems","marginRight","Counting","useKeyPress","targetKey","keyPressed","setKeyPressed","downHandler","key","upHandler","useEffect","window","addEventListener","removeEventListener","App","currentPage","setCurrentPage","leftPress","rightPress","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sjCAEO,IAAMA,EAAcC,YAAH,KAQXC,EAAoBC,IAAOC,IAAV,KASjBC,EAAcF,IAAOG,KAAV,K,OCdlBC,EAAoB,WACxB,IAAMC,EAAQC,YAAU,CACtBC,OAAQ,CAAEC,SAAU,KACpBC,EAAG,EACHC,KAAM,CAAED,EAAG,OAGb,OACE,kBAAC,IAASE,IAAV,CACEC,gBAAgB,MAChBC,iBAAkBR,EAAMI,EACxBK,MAAM,QACNC,OAAO,QACPC,QAAQ,aAER,0BACEC,OAAO,iBACPC,KAAK,OACLC,YAAY,IACZC,EAAE,qMACFC,UAAW,wBAMbC,EAAc,WAClB,OACE,yBAAKP,OAAO,MAAMD,MAAM,OACtB,0BAAMS,GAAG,IAAIC,GAAG,IAAIC,GAAG,MAAMC,GAAG,IAAIT,OAAO,UAC3C,0BAAMM,GAAG,IAAIC,GAAG,KAAKC,GAAG,MAAMC,GAAG,KAAKT,OAAO,UAC7C,0BAAMR,EAAE,IAAIkB,EAAE,MAAd,KAGA,0BAAMlB,EAAE,MAAMkB,EAAE,MAAhB,KAGA,0BAAMlB,EAAE,IAAIkB,EAAE,MAAd,KAGA,0BAAMlB,EAAE,MAAMkB,EAAE,MAAhB,OAgDSC,EAzCA,WAAO,IAAD,EACeC,oBAAS,GADxB,mBACZC,EADY,KACDC,EADC,KAGnB,OACE,kBAAChC,EAAD,KACE,iDACA,oFACA,kBAAC,EAAD,MACA,kJAIA,kBAAC,EAAD,MACA,4BAAQiC,QAAS,kBAAMD,GAAa,KAApC,aACA,4BAAQC,QAAS,kBAAMD,GAAa,KAApC,2BAGA,4BAAQC,QAAS,kBAAMD,GAAa,KAApC,2BAICD,GACC,yBAAKG,MAAO,CAAEC,UAAW,SACvB,uMAKA,yBAAKD,MAAO,CAAEE,QAAS,OAAQC,WAAY,WACzC,uBAAGH,MAAO,CAAEI,YAAa,SAAzB,4CAGA,kBAACnC,EAAD,KAAc,KACd,kBAACA,EAAD,KAAc,SCtEXoC,EAZE,WACf,OACE,kBAACvC,EAAD,KACE,qLC4BSwC,EAhCK,SAACC,GAAc,MAEGX,oBAAS,GAFZ,mBAE1BY,EAF0B,KAEdC,EAFc,KAKjC,SAASC,EAAT,GAA8B,EAAPC,MACTJ,GACVE,GAAc,GAKlB,IAAMG,EAAY,SAAC,GAAY,EAAVD,MACPJ,GACVE,GAAc,IAelB,OAVAI,qBAAU,WAIR,OAHAC,OAAOC,iBAAiB,UAAWL,GACnCI,OAAOC,iBAAiB,QAASH,GAE1B,WACLE,OAAOE,oBAAoB,UAAWN,GACtCI,OAAOE,oBAAoB,QAASJ,MAErC,IAEIJ,GCFMS,MAxBf,WAAgB,IAAD,EACyBrB,mBAAS,GADlC,mBACNsB,EADM,KACOC,EADP,KAIPC,EAAYd,EAAY,aACxBe,EAAaf,EAAY,cAW/B,OATAO,qBAAU,WACJO,GACEF,EAAc,GAAK,GAAGC,EAAeD,EAAc,GAErDG,GACEH,EAAc,EAVL,GAUmBC,EAAeD,EAAc,KAE9D,CAACE,EAAWC,IAGb,yBAAKC,UAAU,OACI,IAAhBJ,GAAqB,kBAAC,EAAD,MACL,IAAhBA,GAAqB,kBAAC,EAAD,QCnB5BK,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC7D,EAAD,OAEF8D,SAASC,eAAe,W","file":"static/js/main.ab929e75.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    font-family: Rubik, sans-serif;\n    background-color: white;\n    color: black;\n  }\n`;\n\nexport const FullPageContainer = styled.div`\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-left: 50px;\n  padding-right: 50px;\n`;\n\nexport const KeyboardKey = styled.span`\n  display: inline-block;\n  margin-left: 0.25em;\n  width: 1em;\n  height: 1.1em;\n  border: 1px solid #4a3d3e;\n  border-radius: 5px;\n  border-top: 0.5px solid #b2a1a3;\n  border-left: 1px solid #826b6d;\n  border-right: 1px solid #826b6d;\n  border-bottom: 3px solid #4a3d3e;\n  vertical-align: middle;\n  text-align: center;\n  transform: translateY(-12.5%);\n\n  &:last-child {\n    background-color: cornflowerblue;\n  }\n`;\n","import React, { useState } from \"react\";\nimport { FullPageContainer, KeyboardKey } from \"../styles/styles.js\";\nimport { useSpring, animated } from \"react-spring\";\nimport { RightArrow } from \"@styled-icons/boxicons-regular\";\n\nconst AnimatingInfinity = () => {\n  const props = useSpring({\n    config: { duration: 3000 },\n    x: 0,\n    from: { x: 200 },\n  });\n\n  return (\n    <animated.svg\n      strokeDasharray=\"200\"\n      strokeDashoffset={props.x}\n      width=\"400px\"\n      height=\"300px\"\n      viewBox=\"0 0 50 50\"\n    >\n      <path\n        stroke=\"cornflowerblue\"\n        fill=\"none\"\n        strokeWidth=\"4\"\n        d=\"M23.71 5.21l17.58 17.58a12.43 12.43 0 0 0 17.57 0 12.43 12.43 0 0 0 0-17.57 12.43 12.43 0 0 0-17.57 0L23.71 22.79a12.43 12.43 0 0 1-17.57 0 12.43 12.43 0 0 1 0-17.57 12.43 12.43 0 0 1 17.57-.01z\"\n        transform={\"translate(-7, 10)\"}\n      />\n    </animated.svg>\n  );\n};\n\nconst NumberLines = () => {\n  return (\n    <svg height=\"100\" width=\"500\">\n      <line x1=\"0\" y1=\"5\" x2=\"200\" y2=\"5\" stroke=\"black\"></line>\n      <line x1=\"0\" y1=\"50\" x2=\"400\" y2=\"50\" stroke=\"black\"></line>\n      <text x=\"0\" y=\"20\">\n        0\n      </text>\n      <text x=\"195\" y=\"20\">\n        1\n      </text>\n      <text x=\"0\" y=\"70\">\n        0\n      </text>\n      <text x=\"395\" y=\"70\">\n        2\n      </text>\n    </svg>\n  );\n};\n\nconst Header = () => {\n  const [madeGuess, setMadeGuess] = useState(false);\n\n  return (\n    <FullPageContainer>\n      <h1>Counting Infinity</h1>\n      <h2>Why some infinities are bigger than other infinities</h2>\n      <AnimatingInfinity />\n      <p>\n        Which group is bigger: all the numbers between 0 and 1 or all the\n        numbers between 0 and 2? Give it your best guess.\n      </p>\n      <NumberLines />\n      <button onClick={() => setMadeGuess(true)}>same size</button>\n      <button onClick={() => setMadeGuess(true)}>\n        numbers between 0 and 1\n      </button>\n      <button onClick={() => setMadeGuess(true)}>\n        numbers between 0 and 2\n      </button>\n\n      {madeGuess && (\n        <div style={{ marginTop: \"25px\" }}>\n          <p>\n            With a little math and some fun pictures, we can find out the\n            answer. (Don't worry, no fancy background knowledge is needed - if\n            you know how to count, you'll be good!)\n          </p>\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\n            <p style={{ marginRight: \"20px\" }}>\n              Use the arrow keys to advance the story.\n            </p>\n            <KeyboardKey>{\"<\"}</KeyboardKey>\n            <KeyboardKey>{\">\"}</KeyboardKey>\n          </div>\n        </div>\n      )}\n    </FullPageContainer>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { FullPageContainer } from \"../styles/styles.js\";\n\nconst Counting = () => {\n  return (\n    <FullPageContainer>\n      <p>\n        To answer this, we're going to have to do some math. Don't worry, no\n        fancy background knowledge is needed. If you know how to count, you'll\n        be good!\n      </p>\n    </FullPageContainer>\n  );\n};\n\nexport default Counting;\n","import React, { useState, useEffect } from \"react\";\n\nconst useKeyPress = (targetKey) => {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  // If pressed key is our target key then set to true\n  function downHandler({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  // If released key is our target key then set to false\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n};\n\nexport default useKeyPress;\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./article-components/Header.jsx\";\nimport Counting from \"./article-components/Counting.jsx\";\nimport useKeyPress from \"./hooks/useKeyPress.js\";\n\nfunction App() {\n  const [currentPage, setCurrentPage] = useState(0);\n  const numPages = 2;\n\n  const leftPress = useKeyPress(\"ArrowLeft\");\n  const rightPress = useKeyPress(\"ArrowRight\");\n\n  useEffect(() => {\n    if (leftPress) {\n      if (currentPage - 1 >= 0) setCurrentPage(currentPage - 1);\n    }\n    if (rightPress) {\n      if (currentPage + 1 < numPages) setCurrentPage(currentPage + 1);\n    }\n  }, [leftPress, rightPress]);\n\n  return (\n    <div className=\"App\">\n      {currentPage === 0 && <Header />}\n      {currentPage === 1 && <Counting />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { GlobalStyle } from \"./styles/styles.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <GlobalStyle />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}